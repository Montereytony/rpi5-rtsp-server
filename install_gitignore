#!/bin/bash
# GitHub Repository Setup Commands
# Run these commands in your project directory

# =============================================================================
# STEP 1: Initialize Local Git Repository
# =============================================================================

# Initialize git repository (if not already done)
git init

# Create .gitignore file to exclude unwanted files
cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual Environment
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Configuration files with sensitive data
config.ini
.env

# Temporary files
*.tmp
*.bak
*.backup

# System files
*.pid
*.lock
EOF

echo "Created .gitignore file"

# =============================================================================
# STEP 2: Stage and Commit Files
# =============================================================================

# Add all files to staging
git add .

# Make initial commit
git commit -m "Initial commit: RPi5 Multi-Camera RTSP Server

- Add main rtsp_server.py with 3-camera support
- Include comprehensive README.md with installation guide
- Add requirements.txt for dependency management
- Optimize for RPi5 software encoding (no hardware encoder)
- Support for local libcamera devices and remote RTSP streams
- Include detailed troubleshooting and configuration guide"

echo "Initial commit created"

# =============================================================================
# STEP 3: Create and Connect to GitHub Repository
# =============================================================================

echo ""
echo "Now you need to create a repository on GitHub:"
echo "1. Go to https://github.com/new"
echo "2. Repository name: rpi5-rtsp-server"
echo "3. Description: Multi-camera RTSP streaming server optimized for Raspberry Pi 5"
echo "4. Make it Public (recommended for open source)"
echo "5. DO NOT initialize with README, .gitignore, or license (we already have these)"
echo "6. Click 'Create repository'"
echo ""
echo "After creating the repository on GitHub, run these commands:"
echo "(Replace YOUR_USERNAME with your actual GitHub username)"

# =============================================================================
# STEP 4: Connect Local Repository to GitHub
# =============================================================================

cat << 'EOF'

# Add GitHub remote (replace YOUR_USERNAME)
git remote add origin https://github.com/YOUR_USERNAME/rpi5-rtsp-server.git

# Verify remote was added
git remote -v

# Push to GitHub for the first time
git push -u origin main

EOF

# =============================================================================
# STEP 5: Alternative SSH Setup (More Secure)
# =============================================================================

echo ""
echo "=== ALTERNATIVE: Using SSH (Recommended for frequent commits) ==="
echo ""
echo "If you prefer SSH (more secure for frequent pushes):"

cat << 'EOF'

# Generate SSH key (if you don't have one)
ssh-keygen -t ed25519 -C "your_email@example.com"

# Add SSH key to ssh-agent
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

# Display public key to add to GitHub
cat ~/.ssh/id_ed25519.pub

# Add the public key to GitHub:
# 1. Go to GitHub.com → Settings → SSH and GPG keys
# 2. Click "New SSH key"
# 3. Paste the public key content
# 4. Give it a title (e.g., "RPi5 Development")

# Use SSH remote instead of HTTPS
git remote add origin git@github.com:YOUR_USERNAME/rpi5-rtsp-server.git

# Push to GitHub
git push -u origin main

EOF

# =============================================================================
# STEP 6: Additional Useful Git Commands
# =============================================================================

echo ""
echo "=== Useful Git Commands for Future Development ==="

cat << 'EOF'

# Check repository status
git status

# Create and switch to a new feature branch
git checkout -b feature/new-feature-name

# Add specific files
git add filename.py

# Add all changed files
git add .

# Commit with message
git commit -m "Add new feature: description of changes"

# Push current branch to GitHub
git push origin branch-name

# Switch back to main branch
git checkout main

# Pull latest changes from GitHub
git pull origin main

# Merge feature branch into main
git merge feature/new-feature-name

# Delete local feature branch (after merging)
git branch -d feature/new-feature-name

# View commit history
git log --oneline

# View differences before committing
git diff

# Undo last commit (keep changes)
git reset --soft HEAD~1

# Undo last commit (discard changes) - BE CAREFUL!
git reset --hard HEAD~1

EOF

# =============================================================================
# STEP 7: Repository Badges and Enhancements
# =============================================================================

echo ""
echo "=== Optional Repository Enhancements ==="

cat << 'EOF'

# Create LICENSE file (MIT License)
cat > LICENSE << 'EOFLIC'
MIT License

Copyright (c) 2025 Your Name

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOFLIC

# Create CONTRIBUTING.md
cat > CONTRIBUTING.md << 'EOFCONTRIB'
# Contributing to RPi5 RTSP Server

Thank you for your interest in contributing! This document provides guidelines for contributing to the project.

## Getting Started

1. Fork the repository
2. Clone your fork: `git clone https://github.com/YOUR_USERNAME/rpi5-rtsp-server.git`
3. Create a feature branch: `git checkout -b feature/your-feature-name`
4. Make your changes
5. Test thoroughly on actual RPi5 hardware
6. Commit with clear messages
7. Push to your fork and create a Pull Request

## Development Guidelines

- Follow PEP 8 Python coding standards
- Add comments for complex GStreamer pipeline configurations
- Test on actual Raspberry Pi 5 hardware when possible
- Update documentation for any new features
- Include error handling and logging for new functionality

## Reporting Issues

- Use the GitHub issue tracker
- Include RPi5 model, OS version, and camera hardware details
- Provide GStreamer debug logs when relevant
- Include steps to reproduce the issue

## Code Review Process

All contributions go through code review before merging. Please be patient and address any feedback provided.
EOFCONTRIB

# Add new files and commit
git add LICENSE CONTRIBUTING.md
git commit -m "Add LICENSE and CONTRIBUTING.md files"

# Create a development branch
git checkout -b develop
git push origin develop

# Switch back to main
git checkout main

EOF

echo ""
echo "=== Repository Setup Complete! ==="
echo ""
echo "Summary of files created:"
echo "- rtsp_server.py (your main script)"
echo "- README.md (comprehensive documentation)"
echo "- requirements.txt (Python dependencies)"
echo "- .gitignore (ignore unwanted files)"
echo ""
echo "Next steps:"
echo "1. Create repository on GitHub"
echo "2. Run the git remote add command with your username"
echo "3. Push to GitHub with: git push -u origin main"
echo "4. Consider adding LICENSE and CONTRIBUTING.md files"
echo ""
echo "Your repository will be ready for collaboration!"
